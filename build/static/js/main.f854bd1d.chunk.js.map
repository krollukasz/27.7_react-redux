{"version":3,"sources":["Comment.js","actions.js","CommentContainer.js","CommentsList.js","CommentsListContainer.js","TextContainer.js","App.js","serviceWorker.js","comments.js","reducer.js","index.js"],"names":["Comment","_ref","text","votes","id","thumbUpComment","thumbDownComment","removeComment","react_default","a","createElement","className","onClick","index_es","icon","ADD_COMMENT","REMOVE_COMMENT","EDIT_COMMENT","THUMB_UP_COMMENT","THUMB_DOWN_COMMENT","addComment","type","uuid","v4","connect","dispatch","CommentsList","comments","map","comment","CommentContainer","Object","assign","key","state","TextForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","target","value","preventDefault","_this2","onSubmit","e","handleSubmit","onChange","handleChange","rows","cols","Component","form","library","add","faThumbsUp","faThumbsDown","faTrash","App","CommentsListContainer","src_TextContainer","Boolean","window","location","hostname","match","arguments","length","undefined","action","concat","toConsumableArray","filter","objectSpread","reducer","combineReducers","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f854bd1d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport \"./Comment.css\";\r\n\r\nconst Comment = ({text, votes, id, thumbUpComment, thumbDownComment, removeComment}) => \r\n  <li className=\"Comment\">\r\n    {text}\r\n    <span className=\"Votes\"> votes: {votes}</span>\r\n    <div className=\"Comment-buttons\">\r\n      <button className=\"thumbUp\" onClick={() => thumbUpComment(id)}><FontAwesomeIcon icon=\"thumbs-up\" /></button>\r\n      <button className=\"thumbDown\" onClick={() => thumbDownComment(id)}><FontAwesomeIcon icon=\"thumbs-down\" /></button>\r\n      <button className=\"trash\" onClick={() => removeComment(id)}><FontAwesomeIcon icon=\"trash\" /></button>\r\n    </div>\r\n  </li>;\r\n\r\nexport default Comment;\r\n","import uuid from \"uuid\";\r\n\r\nexport const ADD_COMMENT = \"ADD_COMMENT\";\r\nexport const REMOVE_COMMENT = \"REMOVE_COMMENT\";\r\nexport const EDIT_COMMENT = \"EDIT_COMMENT\";\r\nexport const THUMB_UP_COMMENT = \"THUMB_UP_COMMENT\";\r\nexport const THUMB_DOWN_COMMENT = \"THUMB_DOWN_COMMENT\";\r\n\r\nexport function addComment(text) {\r\n  return {\r\n    type: ADD_COMMENT,\r\n    text,\r\n    id: uuid.v4()\r\n  }\r\n}\r\n\r\nexport function removeComment(id) {\r\n  return {\r\n    type: REMOVE_COMMENT,\r\n    id\r\n  }\r\n}\r\n\r\nexport function editComment(id, text) {\r\n  return {\r\n    type: EDIT_COMMENT,\r\n    text,\r\n    id \r\n  }\r\n}\r\n\r\nexport function thumbUpComment(id) {\r\n  return {\r\n    type: THUMB_UP_COMMENT,\r\n    id\r\n  }\r\n}\r\n\r\nexport function thumbDownComment(id) {\r\n  return {\r\n    type: THUMB_DOWN_COMMENT,\r\n    id\r\n  }\r\n}","import { connect } from \"react-redux\";\r\nimport Comment from \"./Comment\";\r\nimport { thumbUpComment, thumbDownComment, removeComment } from \"./actions\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  thumbUpComment: (id) => dispatch(thumbUpComment(id)),\r\n  thumbDownComment: (id) => dispatch(thumbDownComment(id)),\r\n  removeComment: (id) => dispatch(removeComment(id))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Comment);\r\n","import React from \"react\";\r\nimport Comment from \"./CommentContainer\";\r\nimport \"./CommentsList.css\";\r\n\r\nconst CommentsList = ({ comments }) => <ul className=\"CommentsList\">{comments.map(comment => <Comment key={comment.id} {...comment} />)}</ul>;\r\n\r\nexport default CommentsList;\r\n","import { connect } from \"react-redux\";\r\nimport CommentsList from \"./CommentsList\";\r\n\r\nconst mapStateToProps = state => ({\r\n  comments: state.comments\r\n});\r\n\r\nexport default connect(mapStateToProps)(CommentsList);\r\n","import React, { Component} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addComment } from \"./actions\";\r\nimport \"./TextContainer.css\";\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addComment: (text) => dispatch(addComment(text)) \r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    comments: state.comments,\r\n    form: state.form\r\n  }\r\n};\r\n\r\nclass TextForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: \"\",\r\n      id: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ text: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.addComment(this.state.text);\r\n    this.setState({text: \"\"});\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form className=\"form\" onSubmit={(e) => this.handleSubmit(e)}>\r\n        <div>\r\n          <textarea\r\n            value = {this.state.text}\r\n            onChange = {(e) => this.handleChange(e)}\r\n            rows = \"8\"\r\n            cols = \"40\"\r\n            />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">Add comment</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TextForm)\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CommentsListContainer from \"./CommentsListContainer\";\r\nimport TextContainer from \"./TextContainer\";\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faThumbsUp, faThumbsDown, faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faThumbsUp, faThumbsDown, faTrash);\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>App with comments list</h1>\r\n      <CommentsListContainer />\r\n      <h3>Add new comment</h3>\r\n      <TextContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  ADD_COMMENT,\r\n  REMOVE_COMMENT,\r\n  EDIT_COMMENT,\r\n  THUMB_UP_COMMENT,\r\n  THUMB_DOWN_COMMENT\r\n} from \"./actions\";\r\n\r\nfunction comments(state = [], action) {\r\n  switch(action.type) {\r\n    case ADD_COMMENT:\r\n      return [\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          votes: 0\r\n        },\r\n        ...state\r\n      ];\r\n\r\n    case REMOVE_COMMENT:\r\n      return state.filter(comments => comments.id !== action.id);\r\n\r\n    case EDIT_COMMENT:\r\n      return state.map(comment => {\r\n        if (comment.id === action.id) {\r\n          comment.text = action.text\r\n        }\r\n        return comment;\r\n      });\r\n\r\n    case THUMB_UP_COMMENT:\r\n      return state.map(comment => {\r\n        if (comment.id === action.id) {\r\n          return {...comment, votes: comment.votes +1};\r\n        }\r\n        return comment;\r\n      });\r\n\r\n    case THUMB_DOWN_COMMENT:\r\n      return state.map(comment => {\r\n        if (comment.id === action.id) {\r\n          return {...comment, votes: comment.votes -1}\r\n        }\r\n        return comment;\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default comments;","import { combineReducers } from \"redux\";\r\nimport comments from \"./comments\";\r\n\r\nexport const reducer = combineReducers({\r\n  comments\r\n});\r\n\r\n// export default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport { reducer } from \"./reducer\";\r\nimport { addComment } from \"./actions\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nstore.dispatch(addComment(\"First comment\"));\r\nstore.dispatch(addComment(\"Second comment\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}